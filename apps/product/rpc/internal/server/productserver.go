// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: product.proto

package server

import (
	"context"

	"go_mall/apps/product/rpc/internal/logic"
	"go_mall/apps/product/rpc/internal/svc"
	"go_mall/apps/product/rpc/pb"
)

type ProductServer struct {
	svcCtx *svc.ServiceContext
	__.UnimplementedProductServer
}

func NewProductServer(svcCtx *svc.ServiceContext) *ProductServer {
	return &ProductServer{
		svcCtx: svcCtx,
	}
}

// 分类
func (s *ProductServer) GetCategoryById(ctx context.Context, in *__.GetCategoryReq) (*__.GetCategoryResp, error) {
	l := logic.NewGetCategoryByIdLogic(ctx, s.svcCtx)
	return l.GetCategoryById(in)
}

func (s *ProductServer) GetCategoryTree(ctx context.Context, in *__.GetCategoryTreeReq) (*__.GetCategoryTreeResp, error) {
	l := logic.NewGetCategoryTreeLogic(ctx, s.svcCtx)
	return l.GetCategoryTree(in)
}

func (s *ProductServer) AddCategory(ctx context.Context, in *__.AddCategoryReq) (*__.AddCategoryResp, error) {
	l := logic.NewAddCategoryLogic(ctx, s.svcCtx)
	return l.AddCategory(in)
}

func (s *ProductServer) UpdateCategory(ctx context.Context, in *__.UpdateCategoryReq) (*__.UpdateCategoryResp, error) {
	l := logic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

func (s *ProductServer) DeleteCategory(ctx context.Context, in *__.DeleteCategoryReq) (*__.DeleteCategoryResp, error) {
	l := logic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *ProductServer) AddProduct(ctx context.Context, in *__.AddProductReq) (*__.AddProductResp, error) {
	l := logic.NewAddProductLogic(ctx, s.svcCtx)
	return l.AddProduct(in)
}

func (s *ProductServer) UpdateProduct(ctx context.Context, in *__.UpdateProductReq) (*__.UpdateProductResp, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx)
	return l.UpdateProduct(in)
}

func (s *ProductServer) GetProduct(ctx context.Context, in *__.GetProductReq) (*__.GetProductResp, error) {
	l := logic.NewGetProductLogic(ctx, s.svcCtx)
	return l.GetProduct(in)
}

func (s *ProductServer) SearchProduct(ctx context.Context, in *__.SearchProductReq) (*__.SearchProductResp, error) {
	l := logic.NewSearchProductLogic(ctx, s.svcCtx)
	return l.SearchProduct(in)
}
