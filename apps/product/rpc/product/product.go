// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: product.proto

package product

import (
	"context"

	"go_mall/apps/product/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCategoryReq      = __.AddCategoryReq
	AddCategoryResp     = __.AddCategoryResp
	CategoryInfo        = __.CategoryInfo
	CategoryNode        = __.CategoryNode
	DeleteCategoryReq   = __.DeleteCategoryReq
	DeleteCategoryResp  = __.DeleteCategoryResp
	GetCategoryReq      = __.GetCategoryReq
	GetCategoryResp     = __.GetCategoryResp
	GetCategoryTreeReq  = __.GetCategoryTreeReq
	GetCategoryTreeResp = __.GetCategoryTreeResp
	UpdateCategoryReq   = __.UpdateCategoryReq
	UpdateCategoryResp  = __.UpdateCategoryResp

	Product interface {
		// 分类
		GetCategoryById(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error)
		GetCategoryTree(ctx context.Context, in *GetCategoryTreeReq, opts ...grpc.CallOption) (*GetCategoryTreeResp, error)
		AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error)
		UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error)
		DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

// 分类
func (m *defaultProduct) GetCategoryById(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.GetCategoryById(ctx, in, opts...)
}

func (m *defaultProduct) GetCategoryTree(ctx context.Context, in *GetCategoryTreeReq, opts ...grpc.CallOption) (*GetCategoryTreeResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.GetCategoryTree(ctx, in, opts...)
}

func (m *defaultProduct) AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.AddCategory(ctx, in, opts...)
}

func (m *defaultProduct) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...grpc.CallOption) (*UpdateCategoryResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

func (m *defaultProduct) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}
